{% extends '@WebProfiler/Profiler/layout.html.twig' %}

{# templates/data_collector/seo_collector.html.twig #}
{#  https://symfony.com/doc/current/profiler.html#adding-web-profiler-templates #}
{% block toolbar %}


    {% set icon %}
        {{ source('@SurvosPwaExtra/data_collector/pwa-svgrepo-com.svg') }}
        {# @todo: get the icon from the manifest #}
        <span class="sf-toolbar-value">
            PWA
        </span>
    {% endset %}

    {% set text %}


        <div class="sf-toolbar-info-piece">
            {#            <b>Title length ({{ constant('App\\Twig\\Extension\\SeoExtension::MIN_TITLE_LENGTH') }} > {{ constant('App\\Twig\\Extension\\SeoExtension::MAX_TITLE_LENGTH') }})</b> #}
            {# @todo: get the status based on the caching strategy #}
            {% set status = collector.title['status'] is defined ? collector.title['status'] : 'green' %}
            <span class="sf-toolbar-status sf-toolbar-status-{{ status }}">
        {{ collector.route|default('nope') }}
            </span>
        </div>

        <div class="sf-toolbar-info-piece">
            Version {{ collector.get('workbox_version') }}
            <span class="sf-toolbar-status sf-toolbar-status-{{ status }}">
{#            <b>{{ collector.cachingStrategy|default('') }}</b>#}
            </span>
        </div>

    {% endset %}

    {{ include('@WebProfiler/Profiler/toolbar_item.html.twig', { link: true }) }}
{% endblock %}



{% block head %}
    {# Optional. Here you can link to or define your own CSS and JS contents. #}
    {{ parent() }}
    {# Use {{ parent() }} to extend the default styles instead of overriding them. #}
{% endblock %}

{% block menu %}
    {# This left-hand menu appears when using the full-screen profiler. #}
    <span class="label">
        <span class="icon">
                {{ source('@SurvosPwaExtra/data_collector/pwa-svgrepo-com.svg') }}
    </span>
        <strong>PWA</strong>
    </span>
{% endblock %}

{% block panel %}
    {# Optional, for showing the most details. #}
    <div class="sf-tabs">
        <div class="tab">
            <h3 class="tab-title">Manifest</h3>
            <div class="tab-content">
                {% set manifest = collector.manifestData %}

                <h3>{{ manifest.name }}</h3>
                <p>{{ manifest.description }}</p>

                Installable?: (not sure)<br/>
                StartURL: {{ manifest.start_url }}<br/>
                ServiceWorker:
                <a target="_blank" href="{{ manifest.serviceworker.src }}">{{ manifest.serviceworker.src }}</a>
                {#                Manifest: #}
                {#                <a target="_blank" href="{{ manifest.src }}">{{ manifest.src }}</a> #}

                <h3>{{ manifest.icons|length }} icons</h3>
                <p>@todo: map from /assets to a link we use use in an img tag</p>
                {% for icon in manifest.icons %}
                    <li>

                        {% set imageUrl = icon.src|replace({'/assets': ''}) %}
                        <a href="{{ imageUrl }}">
                            <img style="max-width: 100px" src="{{ imageUrl }}" title="{{ icon.src }}"
                                 alt="{{ imageUrl }}">
                        </a>
                        <br/>Sizes: {{ icon.sizes|join(',') }}
                    </li>
                {% endfor %}

                <h3>{{ manifest.screenshots|length }} Screenshots</h3>
                {% for screenshot in manifest.screenshots %}
                    <img
                            alt=" {{ screenshot.src }}"
                            style="max-height: 400px" src="{{ asset(screenshot.src) }}"/>
                {% endfor %}
            </div>
        </div>

        <div class="tab active">
            <h3 class="tab-title">Caches</h3>
            <div class="tab-content">

                <h2>PWA Caches</h2>

                {{ _self.render_table(collector.cacheData) }}
            </div>
        </div>

        {% for shortClassName, strategies in collector.cacheData %}
        {% for strategy in strategies %}
            {% set urls = strategy.options.warmUrls|default([]) %}
        {% if urls|length %}
        <div class="tab">
            <h3 class="tab-title">{{ strategy.name }} {{ strategy.strategy }}
                <span class="badge">{{ urls|length }}</span>
            </h3>
            <div class="tab-content">
                <h1>{{ strategy.name }}</h1>
                <div>{{ strategy.strategy }}</div>
                <div>{{ strategy.urlPattern }}</div>
                {{ _self.render_urls(strategy, urls) }}
            </div>
        </div>
        {% endif %}
        {% endfor %}
        {% endfor %}

        <div class="tab">
            <h3 class="tab-title">Attribute Routes</h3>
            <div class="tab-content">

                <h2>Routes From Attributes</h2>
                <p>
                    These routes were tagged with #[PwaExtra()], and
                    were cached during the compliler pass, and have <b>NOT</b> been integrated into the
                    service
                    worker.
                    Presumably they will go into the PageCache, with the right strategy.
                </p>
                <table>
                    <tr>
                        <th>Route</th>
                        <th>#[PwaExtra()] strategy</th>
                    </tr>


                    {% for route, strategy in collector.routesFromAttributes %}
                        <tr>
                            <td>{{ route }}</td>
                            <td>{{ strategy }}</td>
                        </tr>

                    {% endfor %}
                </table>

            </div>
        </div>
    </div>
    <table>
        {# use the profiler_dump() function to render the contents of dumped objects #}
        <tr>
            {#            {{ profiler_dump(collector.data) }} #}
        </tr>
    </table>
{% endblock %}



    {% macro render_urls(strategy, urls) %}
        <table>
            <tbody>

                    {% for url in urls %}
                        <tr>
{#                            <td>{{ strategy|keys|json_encode }}</td>#}
                            <td>
                                <a href="{{ url }}">
                                    {{ url }}
                                </a>
                                {#                                                    {% set link = path(url.path, url.params|default([])) %}#}
                                {#                                                    {% if not loop.first %}<br/>{% endif %}#}
                                {#                                                    <a href="{{ link }}" target="_blank">{{ link }}</a>#}

                            </td>

                        </tr>

                    {% endfor %}
            </tbody>
        </table>

    {% endmacro %}
    {% macro render_table(cacheInfo) %}
        <table>
            <thead>
            <tr>
                <th>Name</th>
                <th>Stategy</th>
                <th>Options</th>
                <th>Urls</th>
            </tr>
            </thead>
            <tbody>
            {% for shortClassName, strategies in cacheInfo %}
                {% for strategy in strategies %}
                    <tr>
                        <td>{{ strategy.name }}<br />
                            <span class="font-normal text-small">{{ shortClassName }}</span></td>
                        <td>
                            {% set anchor = strategy.strategy|u.snake|replace({'_':'-'}) %}
                            {% set referenceUrl = 'https://developer.chrome.com/docs/workbox/modules/workbox-strategies#' ~ anchor %}
                            <a target="_blank" href="{{ referenceUrl }}">
                                {{ strategy.strategy }}
                            </a>
                            <br/>{{ strategy.urlPattern }}
                        </td>
                        <td>

                            {% for var, val in strategy.options %}
                                {% if var != 'warmUrls' %}
                                    <li>{{ var }} {{ val|json_encode }}</li>
                                {% endif %}
                            {% endfor %}
                            {#                            <br />{{ strategy.options|json_encode }} #}
                            {#                                        {{ profiler_dump(strategy) }} #}

                        </td>
                        <td>
                            {{ strategy.options.warmUrls|default([])|length }} urls
                        </td>
                    </tr>
                {% endfor %}
            {% endfor %}
            </tbody>
        </table>
        {#                    <td class="font-normal text-small nowrap">{{ cache.networkTimeout|default('') }}</td> #}
        {#                    <td class="font-normal text-small nowrap"> #}
        {#                        {{ source('@WebProfiler/Icon/%s.svg'|format(cache.enabled ? 'yes' : 'no')) }} #}
        {#                    </td> #}
        {#                    {% if cache.urls|default(false) %} #}
        {#                        <td colspan="2"> #}
        {#                            {% for url in cache.urls|default([]) %} #}
        {#                                #}{#  convert to a url #}
        {#                                {% set link = path(url.path, url.params|default([])) %} #}
        {#                                {% if not loop.first %}<br/>{% endif %} #}
        {#                                <a href="{{ link }}" target="_blank">{{ link }}</a> #}
        {#                            {% endfor %} #}
        {#                        </td> #}
        {#                    {% else %} #}
        {#                        <td class="font-normal text-small nowrap">{{ cache.regex|default('-') }}</td> #}
        {#                        <td class="font-normal text-small text-bold nowrap">{{ cache.maxEntries|default('') }}</td> #}
        {#                    {% endif %} #}
        {#                    <td class="font-normal text-small text-bold nowrap">{{ cache.maxAge|default('') }}</td> #}
        {#                </tr> #}
        {#            {% endfor %} #}
        {#            </tbody> #}
        {#        </table> #}
    {% endmacro %}

